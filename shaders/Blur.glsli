//------------------------------------------------------------------------------

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
layout(rgba16f, binding=0) uniform writeonly image2D uTarget;

uniform sampler2D uSource;

uniform float weight[5] = float[](0.227027, 0.1945946, 0.1216216, 0.054054, 0.016216);

void main()
{
	uint x = gl_GlobalInvocationID.x;	
	uint y = gl_GlobalInvocationID.y;
    ivec2 s = imageSize(uTarget);

	// check out of bounds
	if (x >= s.x || y >= s.y)
		return;

	float fx = (float(x) + 0.5) / float(s.x);
	float fy = (float(y) + 0.5) / float(s.y);

    vec2 coords = vec2(fx, fy);
    vec2 offset = 1.0 / vec2(s.x, s.y);

    vec3 color = texture(uSource, coords).rgb * weight[0];
    for (int i = 1; i < 5; i++)
    {
    #if BLUR_HORIZONTAL
        color += texture(uSource, coords + vec2(offset.x*i, 0.0)).rgb * weight[i];
        color += texture(uSource, coords - vec2(offset.x*i, 0.0)).rgb * weight[i];
    #else
        color += texture(uSource, coords + vec2(0.0, offset.y*i)).rgb * weight[i];
        color += texture(uSource, coords - vec2(0.0, offset.y*i)).rgb * weight[i];
    #endif
    }
	imageStore(uTarget, ivec2(x, y), vec4(color, 0.0));
}